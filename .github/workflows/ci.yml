name: Build & Test

on:
  pull_request:
    branches: [ "main" ]

jobs:
  build-test:
    name: Build & Test (.NET 9)
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        dotnet-version: [ '9.0.x' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ matrix.dotnet-version }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}-${{ matrix.dotnet-version }}-
            nuget-${{ runner.os }}-

      - name: Restore dependencies
        run: dotnet restore

      - name: Check formatting
        id: format
        run: |
          dotnet format --verify-no-changes --verbosity diagnostic > format-results.txt || echo "FORMAT_ERROR=true" >> $GITHUB_ENV

      - name: Upload format results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: format-results
          path: format-results.txt

      - name: Comment on PR if formatting failed
        if: env.FORMAT_ERROR == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = fs.readFileSync('format-results.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üõë **Code formatting check failed**.\n\nPlease run \`dotnet format\` locally and commit the changes.\n\n\`\`\`\n${results.slice(0, 3000)}\n\`\`\`\n_Only first 3000 characters shown._`
            });

      - name: Fail if formatting failed
        if: env.FORMAT_ERROR == 'true'
        run: exit 1

      - name: Build solution
        run: dotnet build --no-restore --configuration Release --verbosity minimal

      - name: Run tests
        run: dotnet test --no-build --configuration Release --verbosity normal --logger "trx;LogFileName=test_results.trx" > test-results.txt || echo "TEST_ERROR=true" >> $GITHUB_ENV

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: '**/TestResults/*.trx'

      - name: Annotate test results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: .NET Tests
          path: '**/TestResults/*.trx'
          reporter: dotnet-trx

      - name: Comment on PR if tests failed
        if: env.TEST_ERROR == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = fs.readFileSync('test-results.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚ùå **Tests failed** during CI run.\n\n\`\`\`\n${results.slice(0, 3000)}\n\`\`\`\n_Only first 3000 characters shown._`
            });

      - name: Fail if tests failed
        if: env.TEST_ERROR == 'true'
        run: exit 1
